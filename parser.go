
//line parser.rl:1
package mozpref

// Disable Go linting and validation as per
// <https://golang.org/s/generatedcode>:
//
// Code generated by ragel. DO NOT EDIT.
//

import (
  "fmt"
  "strconv"
)

type parsedPref struct {
  Name string
  *Pref
}

func newParsedPref(flags uint) parsedPref {
  return parsedPref{
    Pref: &Pref{
      Flags: flags,
    },
  }
}


//line parser.rl:155



//line parser.go:35
var _prefs_cond_offsets []byte = []byte{
	0, 0, 1, 1, 1, 2, 3, 4, 
	4, 4, 4, 5, 6, 7, 8, 8, 
	9, 10, 10, 11, 12, 13, 14, 14, 
	15, 16, 16, 17, 18, 19, 20, 20, 
	21, 22, 23, 23, 23, 24, 25, 26, 
	27, 28, 29, 29, 29, 30, 31, 32, 
	32, 32, 32, 32, 32, 33, 33, 34, 
	35, 36, 36, 36, 36, 36, 36, 37, 
	38, 38, 38, 38, 39, 39, 39, 40, 
	40, 40, 40, 40, 41, 41, 42, 43, 
	44, 44, 44, 44, 44, 45, 45, 45, 
	45, 46, 46, 47, 48, 49, 50, 50, 
	50, 50, 51, 51, 51, 52, 52, 52, 
	52, 52, 53, 54, 55, 55, 56, 57, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 60, 61, 62, 63, 
}

var _prefs_cond_lengths []byte = []byte{
	0, 1, 0, 0, 1, 1, 1, 0, 
	0, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 1, 1, 1, 1, 0, 1, 
	1, 0, 1, 1, 1, 1, 0, 1, 
	1, 1, 0, 0, 1, 1, 1, 1, 
	1, 1, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 1, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 1, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 1, 1, 1, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 1, 1, 1, 1, 0, 0, 
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
}

var _prefs_cond_keys []int16 = []int16{
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 
}

var _prefs_cond_spaces []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 
}

var _prefs_key_offsets []int16 = []int16{
	0, 0, 7, 8, 10, 18, 26, 35, 
	36, 37, 38, 47, 56, 65, 72, 73, 
	83, 93, 95, 104, 113, 122, 129, 130, 
	146, 162, 164, 174, 184, 194, 201, 202, 
	211, 220, 227, 228, 230, 238, 246, 255, 
	265, 275, 282, 283, 285, 293, 301, 310, 
	311, 312, 313, 314, 315, 325, 327, 335, 
	343, 352, 353, 354, 355, 356, 357, 367, 
	374, 376, 379, 382, 389, 390, 392, 399, 
	401, 404, 407, 409, 421, 423, 431, 439, 
	448, 449, 450, 451, 452, 462, 463, 464, 
	465, 475, 477, 485, 493, 502, 509, 511, 
	514, 517, 524, 525, 527, 534, 536, 539, 
	542, 544, 552, 560, 569, 571, 579, 587, 
	596, 597, 598, 599, 600, 601, 602, 603, 
	604, 605, 606, 615, 616, 617, 618, 619, 
	620, 621, 622, 623, 632, 643, 651, 659, 
}

var _prefs_trans_keys []int16 = []int16{
	10, 269, 525, 0, 12, 14, 255, 10, 
	42, 47, 10, 42, 269, 525, 0, 12, 
	14, 255, 10, 42, 269, 525, 0, 12, 
	14, 255, 10, 42, 47, 269, 525, 0, 
	12, 14, 255, 114, 101, 102, 10, 32, 
	35, 40, 47, 269, 525, 9, 12, 10, 
	32, 35, 40, 47, 269, 525, 9, 12, 
	10, 32, 35, 40, 47, 269, 525, 9, 
	12, 10, 269, 525, 0, 12, 14, 255, 
	10, 10, 32, 34, 35, 39, 47, 269, 
	525, 9, 12, 10, 32, 34, 35, 39, 
	47, 269, 525, 9, 12, 34, 92, 10, 
	32, 35, 44, 47, 269, 525, 9, 12, 
	10, 32, 35, 44, 47, 269, 525, 9, 
	12, 10, 32, 35, 44, 47, 269, 525, 
	9, 12, 10, 269, 525, 0, 12, 14, 
	255, 10, 10, 32, 34, 35, 39, 43, 
	45, 47, 102, 116, 269, 525, 9, 12, 
	48, 57, 10, 32, 34, 35, 39, 43, 
	45, 47, 102, 116, 269, 525, 9, 12, 
	48, 57, 34, 92, 10, 32, 35, 41, 
	44, 47, 269, 525, 9, 12, 10, 32, 
	35, 41, 44, 47, 269, 525, 9, 12, 
	10, 32, 35, 41, 44, 47, 269, 525, 
	9, 12, 10, 269, 525, 0, 12, 14, 
	255, 10, 10, 32, 35, 47, 59, 269, 
	525, 9, 12, 10, 32, 35, 47, 59, 
	269, 525, 9, 12, 10, 269, 525, 0, 
	12, 14, 255, 10, 42, 47, 10, 42, 
	269, 525, 0, 12, 14, 255, 10, 42, 
	269, 525, 0, 12, 14, 255, 10, 42, 
	47, 269, 525, 0, 12, 14, 255, 10, 
	32, 35, 47, 108, 115, 269, 525, 9, 
	12, 10, 32, 35, 47, 108, 115, 269, 
	525, 9, 12, 10, 269, 525, 0, 12, 
	14, 255, 10, 42, 47, 10, 42, 269, 
	525, 0, 12, 14, 255, 10, 42, 269, 
	525, 0, 12, 14, 255, 10, 42, 47, 
	269, 525, 0, 12, 14, 255, 111, 99, 
	107, 101, 100, 10, 32, 35, 41, 44, 
	47, 269, 525, 9, 12, 42, 47, 10, 
	42, 269, 525, 0, 12, 14, 255, 10, 
	42, 269, 525, 0, 12, 14, 255, 10, 
	42, 47, 269, 525, 0, 12, 14, 255, 
	116, 105, 99, 107, 121, 10, 32, 35, 
	41, 44, 47, 269, 525, 9, 12, 10, 
	269, 525, 0, 12, 14, 255, 34, 92, 
	10, 34, 92, 10, 34, 92, 10, 269, 
	525, 0, 12, 14, 255, 10, 39, 92, 
	10, 269, 525, 0, 12, 14, 255, 39, 
	92, 10, 39, 92, 10, 39, 92, 48, 
	57, 10, 32, 35, 41, 44, 47, 269, 
	525, 9, 12, 48, 57, 42, 47, 10, 
	42, 269, 525, 0, 12, 14, 255, 10, 
	42, 269, 525, 0, 12, 14, 255, 10, 
	42, 47, 269, 525, 0, 12, 14, 255, 
	97, 108, 115, 101, 10, 32, 35, 41, 
	44, 47, 269, 525, 9, 12, 114, 117, 
	101, 10, 32, 35, 41, 44, 47, 269, 
	525, 9, 12, 42, 47, 10, 42, 269, 
	525, 0, 12, 14, 255, 10, 42, 269, 
	525, 0, 12, 14, 255, 10, 42, 47, 
	269, 525, 0, 12, 14, 255, 10, 269, 
	525, 0, 12, 14, 255, 34, 92, 10, 
	34, 92, 10, 34, 92, 10, 269, 525, 
	0, 12, 14, 255, 10, 39, 92, 10, 
	269, 525, 0, 12, 14, 255, 39, 92, 
	10, 39, 92, 10, 39, 92, 42, 47, 
	10, 42, 269, 525, 0, 12, 14, 255, 
	10, 42, 269, 525, 0, 12, 14, 255, 
	10, 42, 47, 269, 525, 0, 12, 14, 
	255, 42, 47, 10, 42, 269, 525, 0, 
	12, 14, 255, 10, 42, 269, 525, 0, 
	12, 14, 255, 10, 42, 47, 269, 525, 
	0, 12, 14, 255, 116, 105, 99, 107, 
	121, 95, 112, 114, 101, 102, 10, 32, 
	35, 40, 47, 269, 525, 9, 12, 115, 
	101, 114, 95, 112, 114, 101, 102, 10, 
	32, 35, 40, 47, 269, 525, 9, 12, 
	10, 32, 35, 47, 112, 115, 117, 269, 
	525, 9, 12, 10, 32, 35, 47, 269, 
	525, 9, 12, 10, 32, 35, 47, 269, 
	525, 9, 12, 
}

var _prefs_single_lengths []byte = []byte{
	0, 3, 1, 2, 4, 4, 5, 1, 
	1, 1, 7, 7, 7, 3, 1, 8, 
	8, 2, 7, 7, 7, 3, 1, 12, 
	12, 2, 8, 8, 8, 3, 1, 7, 
	7, 3, 1, 2, 4, 4, 5, 8, 
	8, 3, 1, 2, 4, 4, 5, 1, 
	1, 1, 1, 1, 8, 2, 4, 4, 
	5, 1, 1, 1, 1, 1, 8, 3, 
	2, 3, 3, 3, 1, 2, 3, 2, 
	3, 3, 0, 8, 2, 4, 4, 5, 
	1, 1, 1, 1, 8, 1, 1, 1, 
	8, 2, 4, 4, 5, 3, 2, 3, 
	3, 3, 1, 2, 3, 2, 3, 3, 
	2, 4, 4, 5, 2, 4, 4, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 9, 6, 6, 0, 
}

var _prefs_range_lengths []byte = []byte{
	0, 2, 0, 0, 2, 2, 2, 0, 
	0, 0, 1, 1, 1, 2, 0, 1, 
	1, 0, 1, 1, 1, 2, 0, 2, 
	2, 0, 1, 1, 1, 2, 0, 1, 
	1, 2, 0, 0, 2, 2, 2, 1, 
	1, 2, 0, 0, 2, 2, 2, 0, 
	0, 0, 0, 0, 1, 0, 2, 2, 
	2, 0, 0, 0, 0, 0, 1, 2, 
	0, 0, 0, 2, 0, 0, 2, 0, 
	0, 0, 1, 2, 0, 2, 2, 2, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 2, 2, 2, 2, 0, 0, 
	0, 2, 0, 0, 2, 0, 0, 0, 
	0, 2, 2, 2, 0, 2, 2, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 0, 
}

var _prefs_index_offsets []int16 = []int16{
	0, 0, 6, 8, 11, 18, 25, 33, 
	35, 37, 39, 48, 57, 66, 72, 74, 
	84, 94, 97, 106, 115, 124, 130, 132, 
	147, 162, 165, 175, 185, 195, 201, 203, 
	212, 221, 227, 229, 232, 239, 246, 254, 
	264, 274, 280, 282, 285, 292, 299, 307, 
	309, 311, 313, 315, 317, 327, 330, 337, 
	344, 352, 354, 356, 358, 360, 362, 372, 
	378, 381, 385, 389, 395, 397, 400, 406, 
	409, 413, 417, 419, 430, 433, 440, 447, 
	455, 457, 459, 461, 463, 473, 475, 477, 
	479, 489, 492, 499, 506, 514, 520, 523, 
	527, 531, 537, 539, 542, 548, 551, 555, 
	559, 562, 569, 576, 584, 587, 594, 601, 
	609, 611, 613, 615, 617, 619, 621, 623, 
	625, 627, 629, 638, 640, 642, 644, 646, 
	648, 650, 652, 654, 663, 674, 682, 690, 
}

var _prefs_trans_targs []byte = []byte{
	134, 134, 2, 1, 1, 132, 134, 132, 
	4, 1, 132, 5, 6, 5, 4, 4, 
	4, 132, 5, 6, 5, 4, 4, 4, 
	132, 5, 6, 133, 5, 4, 4, 4, 
	132, 8, 0, 9, 0, 10, 0, 12, 
	11, 13, 15, 108, 12, 14, 11, 0, 
	12, 11, 13, 15, 108, 12, 14, 11, 
	0, 12, 11, 13, 15, 108, 12, 14, 
	11, 0, 12, 12, 14, 13, 13, 0, 
	12, 0, 16, 15, 17, 97, 99, 104, 
	16, 98, 15, 0, 16, 15, 17, 97, 
	99, 104, 16, 98, 15, 0, 18, 93, 
	17, 20, 19, 21, 23, 89, 20, 22, 
	19, 0, 20, 19, 21, 23, 89, 20, 
	22, 19, 0, 20, 19, 21, 23, 89, 
	20, 22, 19, 0, 20, 20, 22, 21, 
	21, 0, 20, 0, 24, 23, 25, 67, 
	69, 74, 74, 76, 80, 85, 24, 68, 
	23, 75, 0, 24, 23, 25, 67, 69, 
	74, 74, 76, 80, 85, 24, 68, 23, 
	75, 0, 26, 63, 25, 28, 27, 29, 
	31, 39, 53, 28, 30, 27, 0, 28, 
	27, 29, 31, 39, 53, 28, 30, 27, 
	0, 28, 27, 29, 31, 39, 53, 28, 
	30, 27, 0, 28, 28, 30, 29, 29, 
	0, 28, 0, 32, 31, 33, 35, 135, 
	32, 34, 31, 0, 32, 31, 33, 35, 
	135, 32, 34, 31, 0, 32, 32, 34, 
	33, 33, 0, 32, 0, 36, 33, 0, 
	37, 38, 37, 36, 36, 36, 0, 37, 
	38, 37, 36, 36, 36, 0, 37, 38, 
	31, 37, 36, 36, 36, 0, 40, 39, 
	41, 43, 47, 57, 40, 42, 39, 0, 
	40, 39, 41, 43, 47, 57, 40, 42, 
	39, 0, 40, 40, 42, 41, 41, 0, 
	40, 0, 44, 41, 0, 45, 46, 45, 
	44, 44, 44, 0, 45, 46, 45, 44, 
	44, 44, 0, 45, 46, 39, 45, 44, 
	44, 44, 0, 48, 0, 49, 0, 50, 
	0, 51, 0, 52, 0, 28, 27, 29, 
	31, 39, 53, 28, 30, 27, 0, 54, 
	29, 0, 55, 56, 55, 54, 54, 54, 
	0, 55, 56, 55, 54, 54, 54, 0, 
	55, 56, 27, 55, 54, 54, 54, 0, 
	58, 0, 59, 0, 60, 0, 61, 0, 
	62, 0, 28, 27, 29, 31, 39, 53, 
	28, 30, 27, 0, 64, 65, 66, 25, 
	25, 0, 26, 63, 25, 64, 26, 63, 
	25, 64, 26, 63, 25, 24, 24, 68, 
	67, 67, 0, 24, 0, 26, 70, 69, 
	71, 72, 73, 69, 69, 0, 26, 70, 
	69, 71, 26, 70, 69, 71, 26, 70, 
	69, 75, 0, 28, 27, 29, 31, 39, 
	53, 28, 30, 27, 75, 0, 77, 67, 
	0, 78, 79, 78, 77, 77, 77, 0, 
	78, 79, 78, 77, 77, 77, 0, 78, 
	79, 23, 78, 77, 77, 77, 0, 81, 
	0, 82, 0, 83, 0, 84, 0, 28, 
	27, 29, 31, 39, 53, 28, 30, 27, 
	0, 86, 0, 87, 0, 88, 0, 28, 
	27, 29, 31, 39, 53, 28, 30, 27, 
	0, 90, 21, 0, 91, 92, 91, 90, 
	90, 90, 0, 91, 92, 91, 90, 90, 
	90, 0, 91, 92, 19, 91, 90, 90, 
	90, 0, 94, 95, 96, 17, 17, 0, 
	18, 93, 17, 94, 18, 93, 17, 94, 
	18, 93, 17, 16, 16, 98, 97, 97, 
	0, 16, 0, 18, 100, 99, 101, 102, 
	103, 99, 99, 0, 18, 100, 99, 101, 
	18, 100, 99, 101, 18, 100, 99, 105, 
	97, 0, 106, 107, 106, 105, 105, 105, 
	0, 106, 107, 106, 105, 105, 105, 0, 
	106, 107, 15, 106, 105, 105, 105, 0, 
	109, 13, 0, 110, 111, 110, 109, 109, 
	109, 0, 110, 111, 110, 109, 109, 109, 
	0, 110, 111, 11, 110, 109, 109, 109, 
	0, 113, 0, 114, 0, 115, 0, 116, 
	0, 117, 0, 118, 0, 119, 0, 120, 
	0, 121, 0, 122, 0, 12, 11, 13, 
	15, 108, 12, 14, 11, 0, 124, 0, 
	125, 0, 126, 0, 127, 0, 128, 0, 
	129, 0, 130, 0, 131, 0, 12, 11, 
	13, 15, 108, 12, 14, 11, 0, 134, 
	133, 1, 3, 7, 112, 123, 134, 2, 
	133, 0, 134, 133, 1, 3, 134, 2, 
	133, 132, 134, 133, 1, 3, 134, 2, 
	133, 132, 132, 132, 132, 132, 132, 132, 
	132, 132, 132, 132, 
}

var _prefs_trans_actions []byte = []byte{
	2, 2, 0, 0, 0, 1, 2, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 1, 3, 3, 3, 3, 3, 3, 
	1, 0, 0, 2, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 4, 
	4, 4, 4, 4, 4, 4, 4, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 5, 0, 
	0, 0, 0, 0, 3, 3, 6, 3, 
	6, 3, 3, 3, 3, 0, 0, 0, 
	0, 7, 7, 7, 7, 7, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	5, 5, 5, 0, 0, 0, 0, 0, 
	0, 5, 0, 3, 3, 6, 3, 6, 
	6, 6, 3, 3, 3, 3, 3, 3, 
	6, 0, 0, 0, 0, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 11, 11, 11, 11, 11, 
	11, 11, 11, 11, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 14, 14, 14, 
	14, 14, 14, 14, 14, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	15, 15, 15, 15, 15, 15, 0, 2, 
	2, 0, 0, 0, 0, 0, 2, 0, 
	2, 0, 2, 2, 0, 0, 2, 0, 
	2, 18, 20, 20, 3, 3, 20, 3, 
	20, 19, 21, 1, 1, 1, 1, 1, 
	1, 18, 19, 21, 
}

var _prefs_to_state_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 16, 0, 0, 0, 
}

var _prefs_from_state_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
}

var _prefs_eof_trans []int16 = []int16{
	0, 697, 697, 697, 697, 697, 697, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 698, 699, 700, 
}

const prefs_start int = 132
const prefs_first_final int = 132
const prefs_error int = 0

const prefs_en_main int = 132


//line parser.rl:158

func parse(data []byte) (PrefMap, error) {
  var err error
  var current parsedPref
  var intValue int
  var strValue string

  lineNumber := 1
  valueStart := 0

  prefs := make(PrefMap)

  cs := 0
  p := 0
  pe := len(data)
  eof := len(data)
  ts := 0
  te := 0
  act := 0

  _ = eof
  _ = te
  _ = ts
  _ = act

  
//line parser.go:548
	{
	cs = prefs_start
	ts = 0
	te = 0
	act = 0
	}

//line parser.rl:184
  
//line parser.go:558
	{
	var _klen int
	var _keys int
	var _trans int
	var _widec int16

	if p == pe {
		goto _test_eof
	}
	if cs == 0 {
		goto _out
	}
_resume:
	switch _prefs_from_state_actions[cs] {
	case 17:
//line NONE:1
ts = p


//line parser.go:578
	}

	_widec = int16(data[p])
	_klen = int(_prefs_cond_lengths[cs])
	_keys = int(_prefs_cond_offsets[cs] * 2)
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
	COND_LOOP:
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case _widec < int16(_prefs_cond_keys[_mid]):
				_upper = _mid - 2
			case _widec > int16(_prefs_cond_keys[_mid + 1]):
				_lower = _mid + 2
			default:
				switch _prefs_cond_spaces[int(_prefs_cond_offsets[cs]) + ((_mid - _keys)>>1)] {
				case 0:
					_widec = 256 + (int16(data[p]) - 0)
					if  (p + 1) < pe && data[p + 1] == '\n'  {
						_widec += 256
					}
				}
				break COND_LOOP
			}
		}
	}

	_keys = int(_prefs_key_offsets[cs])
	_trans = int(_prefs_index_offsets[cs])

	_klen = int(_prefs_single_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case _widec < _prefs_trans_keys[_mid]:
				_upper = _mid - 1
			case _widec > _prefs_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_prefs_range_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case _widec < _prefs_trans_keys[_mid]:
				_upper = _mid - 2
			case _widec > _prefs_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
_eof_trans:
	cs = int(_prefs_trans_targs[_trans])

	if _prefs_trans_actions[_trans] == 0 {
		goto _again
	}

	switch _prefs_trans_actions[_trans] {
	case 5:
//line parser.rl:33

    valueStart = p
  

	case 4:
//line parser.rl:37

    current = newParsedPref(0)
  

	case 15:
//line parser.rl:41

    current = newParsedPref(UserPref)
  

	case 14:
//line parser.rl:45

    current = newParsedPref(Sticky)
  

	case 12:
//line parser.rl:65

    current.Value = false
  

	case 13:
//line parser.rl:69

    current.Value = true
  

	case 3:
//line parser.rl:73

    lineNumber++
  

	case 10:
//line parser.rl:133
 current.Flags |= Sticky 

	case 9:
//line parser.rl:134
 current.Flags |= Locked 

	case 18:
//line parser.rl:152
te = p
p--


	case 1:
//line NONE:1
	switch act {
	case 0:
	{cs = 0
goto _again
}
	default:
	{p = (te) - 1
}
	}
	

	case 21:
//line parser.rl:53

    prefs[current.Name] = current.Pref
  
//line parser.rl:153
te = p
p--


	case 6:
//line parser.rl:73

    lineNumber++
  
//line parser.rl:33

    valueStart = p
  

	case 19:
//line parser.rl:73

    lineNumber++
  
//line parser.rl:152
te = p
p--


	case 7:
//line parser.rl:101

    strValue, err = unquote(string(data[valueStart:p]))
    if err != nil {
      goto fail
    }
  
//line parser.rl:49

    current.Name = strValue
  

	case 8:
//line parser.rl:101

    strValue, err = unquote(string(data[valueStart:p]))
    if err != nil {
      goto fail
    }
  
//line parser.rl:57

    current.Value = strValue
  

	case 11:
//line parser.rl:109

    {
      var intValue64 int64

      intValue64, err = strconv.ParseInt(string(data[valueStart:p]), 10, 32)
      if err != nil {
        goto fail;
      }

      intValue = int(intValue64)
    }
  
//line parser.rl:61

    current.Value = intValue
  

	case 2:
//line NONE:1
te = p+1

//line parser.rl:152
act = 1;

	case 20:
//line NONE:1
te = p+1

//line parser.rl:73

    lineNumber++
  
//line parser.rl:152
act = 1;

//line parser.go:836
	}

_again:
	switch _prefs_to_state_actions[cs] {
	case 16:
//line NONE:1
ts = 0

//line NONE:1
act = 0


//line parser.go:849
	}

	if cs == 0 {
		goto _out
	}
	if p++; p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		if _prefs_eof_trans[cs] > 0 {
			_trans = int(_prefs_eof_trans[cs] - 1)
			goto _eof_trans
		}
	}

	_out: {}
	}

//line parser.rl:185

  if cs == prefs_error || cs != prefs_first_final {
    err = fmt.Errorf("Syntax error")
  }

fail:
  if err != nil {
    err = fmt.Errorf("Line %d: %s", lineNumber, err)

    return nil, err
  }

  return prefs, err
}

// vim: set sw=2 sts=2 et syntax=ragel :
